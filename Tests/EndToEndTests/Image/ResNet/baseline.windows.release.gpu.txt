Copying test data to local directory
=== Running /cygdrive/c/repo/cntk_github3/CNTK/x64/release/cntk.exe configFile=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/ResNet_34.config currentDirectory=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu\TestData RunDir=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu DataDir=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu\TestData ConfigDir=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet DeviceId=0
-------------------------------------------------------------------
Build info: 

		Built time: Jan 27 2016 10:37:10
		Last modified date: Tue Jan 26 11:29:23 2016
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		CUB_PATH: c:\Tools\cub-1.4.1\
		CUDNN_PATH: c:\Tools\cudnn-4.0\cuda
		Build Branch: eldak/ImageE2eTests
		Build SHA1: 333529e04ba1d440b268dafa1bfb93abf8c25886
		Built by eldak on ELDAK-0           
		Build Path: c:\repo\cntk_github3\CNTK\Source\CNTK\
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Jan 27 2016 10:37:10
		Last modified date: Tue Jan 26 11:29:23 2016
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		CUB_PATH: c:\Tools\cub-1.4.1\
		CUDNN_PATH: c:\Tools\cudnn-4.0\cuda
		Build Branch: eldak/ImageE2eTests
		Build SHA1: 333529e04ba1d440b268dafa1bfb93abf8c25886
		Built by eldak on ELDAK-0           
		Build Path: c:\repo\cntk_github3\CNTK\Source\CNTK\
-------------------------------------------------------------------
running on ELDAK-0 at 2016/01/27 11:13:32
command line: 
C:\repo\cntk_github3\CNTK\x64\release\cntk.exe configFile=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/ResNet_34.config currentDirectory=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu\TestData RunDir=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu DataDir=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu\TestData ConfigDir=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet DeviceId=0 

>>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
ndlMacros=$ConfigDir$/Macros.ndl
precision=float
deviceId=Auto
command=Train:CreateEval:Test
parallelTrain=false
traceLevel=1
numMBsToShowResult=1
Proj64to128Filename = $ConfigDir$/64to128.txt
Proj128to256Filename = $ConfigDir$/128to256.txt
Proj256to512Filename = $ConfigDir$/256to512.txt
Train=[
    action=train
    modelPath=$RunDir$/models/ResNet_34
     NDLNetworkBuilder=[
        networkDescription=$ConfigDir$/ResNet_34.ndl
    ]
    SGD=[
        epochSize=0
        minibatchSize=8
        learningRatesPerMB=1.0*35:0.1*35:0.01
        momentumPerMB=0.9
        maxEpochs=3
        gradUpdateType=None
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod=DataParallelSGD
            distributedMBReading=true
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType=ImageReader
        file=$ConfigDir$/train_map.txt
        randomize=Auto
        features=[
            width=224
            height=224
            channels=3
            cropType=Random
            cropRatio=0.46666:0.875
            jitterType=UniRatio
            interpolations=Linear
            meanFile=$ConfigDir$/ImageNet1K_mean.xml
        ]
        labels=[
            labelDim=1000
        ]
    ]    
]
CreateEval=[    
    action=edit
    CurModel=$RunDir$/models/ResNet_34
    NewModel=$RunDir$/models/ResNet_34.Eval
    editPath=$ConfigDir$/create_eval_model.mel
]
Test=[
    action=test
    modelPath=$RunDir$/models/ResNet_34.Eval
    minibatchSize=8
     NDLNetworkBuilder=[
        networkDescription=$ConfigDir$/ResNet_34.ndl
    ]
    reader=[
        readerType=ImageReader
        file=$ConfigDir$/val_map.txt
        randomize=None
        features=[
            width=224
            height=224
            channels=3
            cropType=Center
            meanFile=$ConfigDir$/ImageNet1K_mean.xml
        ]
        labels=[
            labelDim=1000
        ]
    ]    
]
currentDirectory=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu\TestData
RunDir=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu
DataDir=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu\TestData
ConfigDir=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet
DeviceId=0

<<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
ndlMacros=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/Macros.ndl
precision=float
deviceId=Auto
command=Train:CreateEval:Test
parallelTrain=false
traceLevel=1
numMBsToShowResult=1
Proj64to128Filename = C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/64to128.txt
Proj128to256Filename = C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/128to256.txt
Proj256to512Filename = C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/256to512.txt
Train=[
    action=train
    modelPath=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu/models/ResNet_34
     NDLNetworkBuilder=[
        networkDescription=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/ResNet_34.ndl
    ]
    SGD=[
        epochSize=0
        minibatchSize=8
        learningRatesPerMB=1.0*35:0.1*35:0.01
        momentumPerMB=0.9
        maxEpochs=3
        gradUpdateType=None
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod=DataParallelSGD
            distributedMBReading=true
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType=ImageReader
        file=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/train_map.txt
        randomize=Auto
        features=[
            width=224
            height=224
            channels=3
            cropType=Random
            cropRatio=0.46666:0.875
            jitterType=UniRatio
            interpolations=Linear
            meanFile=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/ImageNet1K_mean.xml
        ]
        labels=[
            labelDim=1000
        ]
    ]    
]
CreateEval=[    
    action=edit
    CurModel=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu/models/ResNet_34
    NewModel=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu/models/ResNet_34.Eval
    editPath=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/create_eval_model.mel
]
Test=[
    action=test
    modelPath=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu/models/ResNet_34.Eval
    minibatchSize=8
     NDLNetworkBuilder=[
        networkDescription=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/ResNet_34.ndl
    ]
    reader=[
        readerType=ImageReader
        file=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/val_map.txt
        randomize=None
        features=[
            width=224
            height=224
            channels=3
            cropType=Center
            meanFile=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/ImageNet1K_mean.xml
        ]
        labels=[
            labelDim=1000
        ]
    ]    
]
currentDirectory=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu\TestData
RunDir=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu
DataDir=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu\TestData
ConfigDir=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet
DeviceId=0

<<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: ResNet_34.config:command=Train:CreateEval:Test
configparameters: ResNet_34.config:ConfigDir=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet
configparameters: ResNet_34.config:CreateEval=[    
    action=edit
    CurModel=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu/models/ResNet_34
    NewModel=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu/models/ResNet_34.Eval
    editPath=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/create_eval_model.mel
]

configparameters: ResNet_34.config:currentDirectory=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu\TestData
configparameters: ResNet_34.config:DataDir=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu\TestData
configparameters: ResNet_34.config:deviceId=0
configparameters: ResNet_34.config:ndlMacros=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/Macros.ndl
configparameters: ResNet_34.config:numMBsToShowResult=1
configparameters: ResNet_34.config:parallelTrain=false
configparameters: ResNet_34.config:precision=float
configparameters: ResNet_34.config:Proj128to256Filename=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/128to256.txt
configparameters: ResNet_34.config:Proj256to512Filename=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/256to512.txt
configparameters: ResNet_34.config:Proj64to128Filename=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/64to128.txt
configparameters: ResNet_34.config:RunDir=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu
configparameters: ResNet_34.config:Test=[
    action=test
    modelPath=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu/models/ResNet_34.Eval
    minibatchSize=8
     NDLNetworkBuilder=[
        networkDescription=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/ResNet_34.ndl
    ]
    reader=[
        readerType=ImageReader
        file=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/val_map.txt
        randomize=None
        features=[
            width=224
            height=224
            channels=3
            cropType=Center
            meanFile=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/ImageNet1K_mean.xml
        ]
        labels=[
            labelDim=1000
        ]
    ]    
]

configparameters: ResNet_34.config:traceLevel=1
configparameters: ResNet_34.config:Train=[
    action=train
    modelPath=F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu/models/ResNet_34
     NDLNetworkBuilder=[
        networkDescription=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/ResNet_34.ndl
    ]
    SGD=[
        epochSize=0
        minibatchSize=8
        learningRatesPerMB=1.0*35:0.1*35:0.01
        momentumPerMB=0.9
        maxEpochs=3
        gradUpdateType=None
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod=DataParallelSGD
            distributedMBReading=true
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType=ImageReader
        file=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/train_map.txt
        randomize=Auto
        features=[
            width=224
            height=224
            channels=3
            cropType=Random
            cropRatio=0.46666:0.875
            jitterType=UniRatio
            interpolations=Linear
            meanFile=C:\repo\cntk_github3\CNTK\Tests\EndToEndTests\Image\ResNet/ImageNet1K_mean.xml
        ]
        labels=[
            labelDim=1000
        ]
    ]    
]

<<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
command: Train CreateEval Test 
precision = float
CNTKModelPath: F:\cygwin64\tmp\cntk-test-20160127121055.80350\Image_ResNet@release_gpu/models/ResNet_34
CNTKCommandTrainInfo: Train : 3
CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3
CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax
	OutputNodes.z = Plus
	Err = ErrorPrediction
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation


Validating for node CE. 310 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node CE. 126 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node CE, final verification.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

183 out of 310 nodes do not share the minibatch layout with the input data.


Validating for node OutputNodes.z. 308 nodes to process in pass 1.

Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]

Validating for node OutputNodes.z. 125 nodes to process in pass 2.

Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]

Validating for node OutputNodes.z, final verification.

Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]

182 out of 308 nodes do not share the minibatch layout with the input data.


Validating for node Err. 310 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> Err = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node Err. 126 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> Err = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node Err, final verification.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> Err = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

183 out of 310 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

SGD using GPU 0.

Training criterion node(s):
	CE = CrossEntropyWithSoftmax

Evaluation criterion node(s):
	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.
No PreCompute nodes found, skipping PreCompute step
Set Max Temp Mem Size For Convolution Nodes to 0 samples.
Starting Epoch 1: learning rate per sample = 0.125000  effective momentum = 0.900000  momentum as time constant = 75.9 samples

Starting minibatch loop.
 Epoch[ 1 of 3]-Minibatch[   1-   1]: SamplesSeen = 8; TrainLossPerSample =  6.97573328; EvalErr[0]PerSample = 1.00000000; TotalTime = 22.0043s; SamplesPerSecond = 0.4
 Epoch[ 1 of 3]-Minibatch[   2-   2]: SamplesSeen = 8; TrainLossPerSample = 12.50731421; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2658s; SamplesPerSecond = 30.1
 Epoch[ 1 of 3]-Minibatch[   3-   3]: SamplesSeen = 8; TrainLossPerSample = 10.60813141; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2514s; SamplesPerSecond = 31.8
 Epoch[ 1 of 3]-Minibatch[   4-   4]: SamplesSeen = 8; TrainLossPerSample = 11.30500412; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2498s; SamplesPerSecond = 32.0
 Epoch[ 1 of 3]-Minibatch[   5-   5]: SamplesSeen = 8; TrainLossPerSample =  9.06750107; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2488s; SamplesPerSecond = 32.2
 Epoch[ 1 of 3]-Minibatch[   6-   6]: SamplesSeen = 8; TrainLossPerSample =  9.44150543; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2509s; SamplesPerSecond = 31.9
 Epoch[ 1 of 3]-Minibatch[   7-   7]: SamplesSeen = 8; TrainLossPerSample = 11.18314362; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2489s; SamplesPerSecond = 32.1
 Epoch[ 1 of 3]-Minibatch[   8-   8]: SamplesSeen = 8; TrainLossPerSample = 10.36576080; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2509s; SamplesPerSecond = 31.9
 Epoch[ 1 of 3]-Minibatch[   9-   9]: SamplesSeen = 8; TrainLossPerSample =  9.08974457; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2484s; SamplesPerSecond = 32.2
 Epoch[ 1 of 3]-Minibatch[  10-  10]: SamplesSeen = 8; TrainLossPerSample =  8.64213562; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2507s; SamplesPerSecond = 31.9
WARNING: The same matrix with dim [1, 1] has been transferred between different devices for 20 times.
 Epoch[ 1 of 3]-Minibatch[  11-  11]: SamplesSeen = 8; TrainLossPerSample =  9.00920105; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2488s; SamplesPerSecond = 32.2
 Epoch[ 1 of 3]-Minibatch[  12-  12]: SamplesSeen = 8; TrainLossPerSample =  8.35784912; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2508s; SamplesPerSecond = 31.9
 Epoch[ 1 of 3]-Minibatch[  13-  13]: SamplesSeen = 8; TrainLossPerSample = 15.25401306; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2508s; SamplesPerSecond = 31.9
 Epoch[ 1 of 3]-Minibatch[  14-  14]: SamplesSeen = 8; TrainLossPerSample =  7.56872559; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2508s; SamplesPerSecond = 31.9
 Epoch[ 1 of 3]-Minibatch[  15-  15]: SamplesSeen = 8; TrainLossPerSample =  7.98257446; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2492s; SamplesPerSecond = 32.1
 Epoch[ 1 of 3]-Minibatch[  16-  16]: SamplesSeen = 8; TrainLossPerSample =  7.75906372; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2521s; SamplesPerSecond = 31.7
 Epoch[ 1 of 3]-Minibatch[  17-  17]: SamplesSeen = 8; TrainLossPerSample =  7.09379578; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2493s; SamplesPerSecond = 32.1
 Epoch[ 1 of 3]-Minibatch[  18-  18]: SamplesSeen = 8; TrainLossPerSample =  7.04548645; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2503s; SamplesPerSecond = 32.0
 Epoch[ 1 of 3]-Minibatch[  19-  19]: SamplesSeen = 8; TrainLossPerSample =  7.08743286; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2499s; SamplesPerSecond = 32.0
 Epoch[ 1 of 3]-Minibatch[  20-  20]: SamplesSeen = 8; TrainLossPerSample =  7.99891663; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2489s; SamplesPerSecond = 32.1
 Epoch[ 1 of 3]-Minibatch[  21-  21]: SamplesSeen = 8; TrainLossPerSample =  6.69816589; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2508s; SamplesPerSecond = 31.9
 Epoch[ 1 of 3]-Minibatch[  22-  22]: SamplesSeen = 8; TrainLossPerSample =  7.15095520; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2489s; SamplesPerSecond = 32.1
 Epoch[ 1 of 3]-Minibatch[  23-  23]: SamplesSeen = 8; TrainLossPerSample =  7.21060181; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2512s; SamplesPerSecond = 31.8
 Epoch[ 1 of 3]-Minibatch[  24-  24]: SamplesSeen = 8; TrainLossPerSample =  7.07336426; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2488s; SamplesPerSecond = 32.2
 Epoch[ 1 of 3]-Minibatch[  25-  25]: SamplesSeen = 7; TrainLossPerSample =  6.99761091; EvalErr[0]PerSample = 1.00000000; TotalTime = 8.2131s; SamplesPerSecond = 0.9
Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 8.7879009; EvalErrPerSample = 1; AvgLearningRatePerSample = 0.125; EpochTime=35.9922
Starting Epoch 2: learning rate per sample = 0.125000  effective momentum = 0.900000  momentum as time constant = 75.9 samples

Starting minibatch loop.
 Epoch[ 2 of 3]-Minibatch[   1-   1, 4.57%]: SamplesSeen = 8; TrainLossPerSample =  6.67500830; EvalErr[0]PerSample = 1.00000000; TotalTime = 8.3257s; SamplesPerSecond = 1.0
 Epoch[ 2 of 3]-Minibatch[   2-   2, 9.14%]: SamplesSeen = 8; TrainLossPerSample =  6.59926081; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2490s; SamplesPerSecond = 32.1
 Epoch[ 2 of 3]-Minibatch[   3-   3, 13.71%]: SamplesSeen = 8; TrainLossPerSample =  6.58376694; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2507s; SamplesPerSecond = 31.9
 Epoch[ 2 of 3]-Minibatch[   4-   4, 18.29%]: SamplesSeen = 8; TrainLossPerSample =  6.68553162; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2494s; SamplesPerSecond = 32.1
 Epoch[ 2 of 3]-Minibatch[   5-   5, 22.86%]: SamplesSeen = 8; TrainLossPerSample =  7.05171585; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2523s; SamplesPerSecond = 31.7
 Epoch[ 2 of 3]-Minibatch[   6-   6, 27.43%]: SamplesSeen = 8; TrainLossPerSample =  6.58290863; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2507s; SamplesPerSecond = 31.9
 Epoch[ 2 of 3]-Minibatch[   7-   7, 32.00%]: SamplesSeen = 8; TrainLossPerSample =  6.78830338; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2526s; SamplesPerSecond = 31.7
 Epoch[ 2 of 3]-Minibatch[   8-   8, 36.57%]: SamplesSeen = 8; TrainLossPerSample =  6.46192551; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2491s; SamplesPerSecond = 32.1
 Epoch[ 2 of 3]-Minibatch[   9-   9, 41.14%]: SamplesSeen = 8; TrainLossPerSample =  6.59339142; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2518s; SamplesPerSecond = 31.8
 Epoch[ 2 of 3]-Minibatch[  10-  10, 45.71%]: SamplesSeen = 8; TrainLossPerSample =  6.52009583; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2489s; SamplesPerSecond = 32.1
WARNING: The same matrix with dim [1, 1] has been transferred between different devices for 20 times.
 Epoch[ 2 of 3]-Minibatch[  11-  11, 50.29%]: SamplesSeen = 8; TrainLossPerSample =  6.67414856; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2511s; SamplesPerSecond = 31.9
 Epoch[ 2 of 3]-Minibatch[  12-  12, 54.86%]: SamplesSeen = 8; TrainLossPerSample =  6.84309387; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2490s; SamplesPerSecond = 32.1
 Epoch[ 2 of 3]-Minibatch[  13-  13, 59.43%]: SamplesSeen = 8; TrainLossPerSample =  6.49095917; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2513s; SamplesPerSecond = 31.8
 Epoch[ 2 of 3]-Minibatch[  14-  14, 64.00%]: SamplesSeen = 8; TrainLossPerSample =  7.28801727; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2488s; SamplesPerSecond = 32.2
 Epoch[ 2 of 3]-Minibatch[  15-  15, 68.57%]: SamplesSeen = 8; TrainLossPerSample =  7.26880646; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2515s; SamplesPerSecond = 31.8
 Epoch[ 2 of 3]-Minibatch[  16-  16, 73.14%]: SamplesSeen = 8; TrainLossPerSample =  6.54650879; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2490s; SamplesPerSecond = 32.1
 Epoch[ 2 of 3]-Minibatch[  17-  17, 77.71%]: SamplesSeen = 8; TrainLossPerSample =  6.86399078; EvalErr[0]PerSample = 0.87500000; TotalTime = 0.2519s; SamplesPerSecond = 31.8
 Epoch[ 2 of 3]-Minibatch[  18-  18, 82.29%]: SamplesSeen = 8; TrainLossPerSample =  6.82318115; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2489s; SamplesPerSecond = 32.1
 Epoch[ 2 of 3]-Minibatch[  19-  19, 86.86%]: SamplesSeen = 8; TrainLossPerSample =  7.11452484; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2486s; SamplesPerSecond = 32.2
 Epoch[ 2 of 3]-Minibatch[  20-  20, 91.43%]: SamplesSeen = 8; TrainLossPerSample =  8.31297302; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2506s; SamplesPerSecond = 31.9
 Epoch[ 2 of 3]-Minibatch[  21-  21, 96.00%]: SamplesSeen = 8; TrainLossPerSample =  6.81170654; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2489s; SamplesPerSecond = 32.1
 Epoch[ 2 of 3]-Minibatch[  22-  22, 100.57%]: SamplesSeen = 8; TrainLossPerSample =  6.76585388; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2512s; SamplesPerSecond = 31.9
 Epoch[ 2 of 3]-Minibatch[  23-  23, 105.14%]: SamplesSeen = 8; TrainLossPerSample =  6.90180969; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2488s; SamplesPerSecond = 32.2
 Epoch[ 2 of 3]-Minibatch[  24-  24, 109.71%]: SamplesSeen = 8; TrainLossPerSample =  6.59695435; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2511s; SamplesPerSecond = 31.9
 Epoch[ 2 of 3]-Minibatch[  25-  25, 114.29%]: SamplesSeen = 7; TrainLossPerSample =  6.57488142; EvalErr[0]PerSample = 1.00000000; TotalTime = 8.0167s; SamplesPerSecond = 0.9
Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 6.8179884; EvalErrPerSample = 0.99497485; AvgLearningRatePerSample = 0.125; EpochTime=22.0994
Starting Epoch 3: learning rate per sample = 0.125000  effective momentum = 0.900000  momentum as time constant = 75.9 samples

Starting minibatch loop.
 Epoch[ 3 of 3]-Minibatch[   1-   1, 4.57%]: SamplesSeen = 8; TrainLossPerSample =  6.58938980; EvalErr[0]PerSample = 1.00000000; TotalTime = 8.4942s; SamplesPerSecond = 0.9
 Epoch[ 3 of 3]-Minibatch[   2-   2, 9.14%]: SamplesSeen = 8; TrainLossPerSample =  6.46698666; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2591s; SamplesPerSecond = 30.9
 Epoch[ 3 of 3]-Minibatch[   3-   3, 13.71%]: SamplesSeen = 8; TrainLossPerSample =  6.61765385; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2489s; SamplesPerSecond = 32.1
 Epoch[ 3 of 3]-Minibatch[   4-   4, 18.29%]: SamplesSeen = 8; TrainLossPerSample =  6.63263893; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2523s; SamplesPerSecond = 31.7
 Epoch[ 3 of 3]-Minibatch[   5-   5, 22.86%]: SamplesSeen = 8; TrainLossPerSample =  6.46485329; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2499s; SamplesPerSecond = 32.0
 Epoch[ 3 of 3]-Minibatch[   6-   6, 27.43%]: SamplesSeen = 8; TrainLossPerSample =  6.56470871; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2522s; SamplesPerSecond = 31.7
 Epoch[ 3 of 3]-Minibatch[   7-   7, 32.00%]: SamplesSeen = 8; TrainLossPerSample =  6.87475204; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2488s; SamplesPerSecond = 32.2
 Epoch[ 3 of 3]-Minibatch[   8-   8, 36.57%]: SamplesSeen = 8; TrainLossPerSample =  6.46915817; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2511s; SamplesPerSecond = 31.9
 Epoch[ 3 of 3]-Minibatch[   9-   9, 41.14%]: SamplesSeen = 8; TrainLossPerSample =  6.32587051; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2492s; SamplesPerSecond = 32.1
 Epoch[ 3 of 3]-Minibatch[  10-  10, 45.71%]: SamplesSeen = 8; TrainLossPerSample =  6.69122314; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2510s; SamplesPerSecond = 31.9
WARNING: The same matrix with dim [1, 1] has been transferred between different devices for 20 times.
 Epoch[ 3 of 3]-Minibatch[  11-  11, 50.29%]: SamplesSeen = 8; TrainLossPerSample =  6.65830231; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2488s; SamplesPerSecond = 32.2
 Epoch[ 3 of 3]-Minibatch[  12-  12, 54.86%]: SamplesSeen = 8; TrainLossPerSample =  6.30830383; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2513s; SamplesPerSecond = 31.8
 Epoch[ 3 of 3]-Minibatch[  13-  13, 59.43%]: SamplesSeen = 8; TrainLossPerSample =  7.09087372; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2488s; SamplesPerSecond = 32.2
 Epoch[ 3 of 3]-Minibatch[  14-  14, 64.00%]: SamplesSeen = 8; TrainLossPerSample =  6.05262756; EvalErr[0]PerSample = 0.87500000; TotalTime = 0.2509s; SamplesPerSecond = 31.9
 Epoch[ 3 of 3]-Minibatch[  15-  15, 68.57%]: SamplesSeen = 8; TrainLossPerSample =  7.09609985; EvalErr[0]PerSample = 0.87500000; TotalTime = 0.2499s; SamplesPerSecond = 32.0
 Epoch[ 3 of 3]-Minibatch[  16-  16, 73.14%]: SamplesSeen = 8; TrainLossPerSample =  6.47881317; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2490s; SamplesPerSecond = 32.1
 Epoch[ 3 of 3]-Minibatch[  17-  17, 77.71%]: SamplesSeen = 8; TrainLossPerSample =  6.58439636; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2510s; SamplesPerSecond = 31.9
 Epoch[ 3 of 3]-Minibatch[  18-  18, 82.29%]: SamplesSeen = 8; TrainLossPerSample =  6.24016571; EvalErr[0]PerSample = 0.87500000; TotalTime = 0.2496s; SamplesPerSecond = 32.1
 Epoch[ 3 of 3]-Minibatch[  19-  19, 86.86%]: SamplesSeen = 8; TrainLossPerSample =  6.48886108; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2507s; SamplesPerSecond = 31.9
 Epoch[ 3 of 3]-Minibatch[  20-  20, 91.43%]: SamplesSeen = 8; TrainLossPerSample =  6.24847412; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2486s; SamplesPerSecond = 32.2
 Epoch[ 3 of 3]-Minibatch[  21-  21, 96.00%]: SamplesSeen = 8; TrainLossPerSample =  6.43492126; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2508s; SamplesPerSecond = 31.9
 Epoch[ 3 of 3]-Minibatch[  22-  22, 100.57%]: SamplesSeen = 8; TrainLossPerSample =  6.18493652; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2490s; SamplesPerSecond = 32.1
 Epoch[ 3 of 3]-Minibatch[  23-  23, 105.14%]: SamplesSeen = 8; TrainLossPerSample =  6.66325378; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2513s; SamplesPerSecond = 31.8
 Epoch[ 3 of 3]-Minibatch[  24-  24, 109.71%]: SamplesSeen = 8; TrainLossPerSample =  6.86149597; EvalErr[0]PerSample = 1.00000000; TotalTime = 0.2491s; SamplesPerSecond = 32.1
 Epoch[ 3 of 3]-Minibatch[  25-  25, 114.29%]: SamplesSeen = 7; TrainLossPerSample =  6.38256836; EvalErr[0]PerSample = 1.00000000; TotalTime = 7.5515s; SamplesPerSecond = 0.9
Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 6.5396385; EvalErrPerSample = 0.98492461; AvgLearningRatePerSample = 0.125; EpochTime=21.8087
CNTKCommandTrainEnd: Train
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.

Post-processing network...

3 roots:
	Err = ErrorPrediction
	OutputNodes.z = Plus
	CE = CrossEntropyWithSoftmax
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation


Validating for node Err. 310 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> Err = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node Err. 126 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> Err = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node Err, final verification.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1])WARNING: trying to use cuDNN on unsupported platform. It is safe to ignore the warning if it's produced during model editing command.
 -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> Err = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

183 out of 310 nodes do not share the minibatch layout with the input data.


Validating for node OutputNodes.z. 308 nodes to process in pass 1.

Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]

Validating for node OutputNodes.z. 125 nodes to process in pass 2.

Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]

Validating for node OutputNodes.z, final verification.

Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]

182 out of 308 nodes do not share the minibatch layout with the input data.


Validating for node CE. 310 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node CE. 126 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node CE, final verification.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

183 out of 310 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

Post-processing network...

4 roots:
	Err = ErrorPrediction
	ErrTop5 = ErrorPrediction
	OutputNodes.z = Plus
	CE = CrossEntropyWithSoftmax
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for ErrTop5 ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation


Validating for node Err. 310 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> Err = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node Err. 126 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> Err = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node Err, final verification.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> Err = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

183 out of 310 nodes do not share the minibatch layout with the input data.


Validating for node ErrTop5. 311 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> unnamed556 = LearnableParameter -> [1 x 1]
Validating --> ErrTop5 = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *], unnamed556[1 x 1]) -> [1]

Validating for node ErrTop5. 126 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> unnamed556 = LearnableParameter -> [1 x 1]
Validating --> ErrTop5 = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *], unnamed556[1 x 1]) -> [1]

Validating for node ErrTop5, final verification.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> unnamed556 = LearnableParameter -> [1 x 1]
Validating --> ErrTop5 = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *], unnamed556[1 x 1]) -> [1]

184 out of 311 nodes do not share the minibatch layout with the input data.


Validating for node OutputNodes.z. 308 nodes to process in pass 1.

Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]

Validating for node OutputNodes.z. 125 nodes to process in pass 2.

Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]

Validating for node OutputNodes.z, final verification.

Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]

182 out of 308 nodes do not share the minibatch layout with the input data.


Validating for node CE. 310 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node CE. 126 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node CE, final verification.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

183 out of 310 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

Post-processing network...

4 roots:
	ErrTop5 = ErrorPrediction
	Err = ErrorPrediction
	OutputNodes.z = Plus
	CE = CrossEntropyWithSoftmax
FormNestedNetwork: WARNING: Was called twice for ErrTop5 ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for Err ErrorPrediction operation
FormNestedNetwork: WARNING: Was called twice for OutputNodes.z Plus operation
FormNestedNetwork: WARNING: Was called twice for CE CrossEntropyWithSoftmax operation


Validating for node ErrTop5. 311 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> unnamed556 = LearnableParameter -> [1 x 1]
Validating --> ErrTop5 = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *], unnamed556[1 x 1]) -> [1]

Validating for node ErrTop5. 126 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> unnamed556 = LearnableParameter -> [1 x 1]
Validating --> ErrTop5 = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *], unnamed556[1 x 1]) -> [1]

Validating for node ErrTop5, final verification.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> unnamed556 = LearnableParameter -> [1 x 1]
Validating --> ErrTop5 = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *], unnamed556[1 x 1]) -> [1]

184 out of 311 nodes do not share the minibatch layout with the input data.


Validating for node Err. 310 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> Err = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node Err. 126 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> Err = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node Err, final verification.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> Err = ErrorPrediction(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

183 out of 310 nodes do not share the minibatch layout with the input data.


Validating for node OutputNodes.z. 308 nodes to process in pass 1.

Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]

Validating for node OutputNodes.z. 125 nodes to process in pass 2.

Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]

Validating for node OutputNodes.z, final verification.

Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]

182 out of 308 nodes do not share the minibatch layout with the input data.


Validating for node CE. 310 nodes to process in pass 1.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node CE. 126 nodes to process in pass 2.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

Validating for node CE, final verification.

Validating --> labels = InputValue -> [1000 x *]
Validating --> OutputNodes.W = LearnableParameter -> [1000 x 512]
Validating --> rn4_3.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_3.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_2.c1.c.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c2.W = LearnableParameter -> [512 x 4608]
Validating --> rn4_1.c1.c.W = LearnableParameter -> [512 x 2304]
Validating --> rn3_6.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_6.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_5.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_4.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_3.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_2.c1.c.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c2.W = LearnableParameter -> [256 x 2304]
Validating --> rn3_1.c1.c.W = LearnableParameter -> [256 x 1152]
Validating --> rn2_4.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_4.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_3.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_2.c1.c.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c2.W = LearnableParameter -> [128 x 1152]
Validating --> rn2_1.c1.c.W = LearnableParameter -> [128 x 576]
Validating --> rn1_3.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_3.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_2.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c2.W = LearnableParameter -> [64 x 576]
Validating --> rn1_1.c1.c.W = LearnableParameter -> [64 x 576]
Validating --> conv1.c.W = LearnableParameter -> [64 x 147]
Validating --> features = InputValue -> [224 x 224 x 3 x *]
Validating --> conv1.c.c.c = Convolution(conv1.c.W[64 x 147], features[224 x 224 x 3 x * {W=224, H=3, C=224}]) -> [112 x 112 x 64 x *]
Validating --> conv1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> conv1.c.c.y = BatchNormalization(conv1.c.c.c[112 x 112 x 64 x * {W=112, H=64, C=112}], conv1.c.c.sc[64 x 1], conv1.c.c.b[64 x 1], conv1.c.c.m[64 x 1], conv1.c.c.isd[64 x 1]) -> [112 x 112 x 64 x *]
Validating --> conv1.y = RectifiedLinear(conv1.c.c.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [112 x 112 x 64 x *]
Validating --> pool1 = MaxPooling(conv1.y[112 x 112 x 64 x * {W=112, H=64, C=112}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.c = Convolution(rn1_1.c1.c.W[64 x 576], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization(rn1_1.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c1.c.c.sc[64 x 1], rn1_1.c1.c.c.b[64 x 1], rn1_1.c1.c.c.m[64 x 1], rn1_1.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c1.y = RectifiedLinear(rn1_1.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.c = Convolution(rn1_1.c2.W[64 x 576], rn1_1.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization(rn1_1.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.c2.c.sc[64 x 1], rn1_1.c2.c.b[64 x 1], rn1_1.c2.c.m[64 x 1], rn1_1.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.p = Plus(rn1_1.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], pool1[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_1.y = RectifiedLinear(rn1_1.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.c = Convolution(rn1_2.c1.c.W[64 x 576], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization(rn1_2.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c1.c.c.sc[64 x 1], rn1_2.c1.c.c.b[64 x 1], rn1_2.c1.c.c.m[64 x 1], rn1_2.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c1.y = RectifiedLinear(rn1_2.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.c = Convolution(rn1_2.c2.W[64 x 576], rn1_2.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization(rn1_2.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.c2.c.sc[64 x 1], rn1_2.c2.c.b[64 x 1], rn1_2.c2.c.m[64 x 1], rn1_2.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.p = Plus(rn1_2.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_2.y = RectifiedLinear(rn1_2.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.c = Convolution(rn1_3.c1.c.W[64 x 576], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization(rn1_3.c1.c.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c1.c.c.sc[64 x 1], rn1_3.c1.c.c.b[64 x 1], rn1_3.c1.c.c.m[64 x 1], rn1_3.c1.c.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c1.y = RectifiedLinear(rn1_3.c1.c.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.c = Convolution(rn1_3.c2.W[64 x 576], rn1_3.c1.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter -> [64 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization(rn1_3.c2.c.c[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_3.c2.c.sc[64 x 1], rn1_3.c2.c.b[64 x 1], rn1_3.c2.c.m[64 x 1], rn1_3.c2.c.isd[64 x 1]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.p = Plus(rn1_3.c2.c.y[56 x 56 x 64 x * {W=56, H=64, C=56}], rn1_2.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn1_3.y = RectifiedLinear(rn1_3.p[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [56 x 56 x 64 x *]
Validating --> rn2_1.c1.c.c.c = Convolution(rn2_1.c1.c.W[128 x 576], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization(rn2_1.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c1.c.c.sc[128 x 1], rn2_1.c1.c.c.b[128 x 1], rn2_1.c1.c.c.m[128 x 1], rn2_1.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c1.y = RectifiedLinear(rn2_1.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.c = Convolution(rn2_1.c2.W[128 x 1152], rn2_1.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization(rn2_1.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c2.c.sc[128 x 1], rn2_1.c2.c.b[128 x 1], rn2_1.c2.c.m[128 x 1], rn2_1.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1_Wproj = LearnableParameter -> [128 x 64]
Validating --> rn2_1.c_proj.c = Convolution(rn2_1_Wproj[128 x 64], rn1_3.y[56 x 56 x 64 x * {W=56, H=64, C=56}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization(rn2_1.c_proj.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.sc[128 x 1], rn2_1.c_proj.b[128 x 1], rn2_1.c_proj.m[128 x 1], rn2_1.c_proj.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.p = Plus(rn2_1.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.c_proj.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_1.y2 = RectifiedLinear(rn2_1.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.c = Convolution(rn2_2.c1.c.W[128 x 1152], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization(rn2_2.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c1.c.c.sc[128 x 1], rn2_2.c1.c.c.b[128 x 1], rn2_2.c1.c.c.m[128 x 1], rn2_2.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c1.y = RectifiedLinear(rn2_2.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.c = Convolution(rn2_2.c2.W[128 x 1152], rn2_2.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization(rn2_2.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.c2.c.sc[128 x 1], rn2_2.c2.c.b[128 x 1], rn2_2.c2.c.m[128 x 1], rn2_2.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.p = Plus(rn2_2.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_1.y2[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_2.y = RectifiedLinear(rn2_2.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.c = Convolution(rn2_3.c1.c.W[128 x 1152], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization(rn2_3.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c1.c.c.sc[128 x 1], rn2_3.c1.c.c.b[128 x 1], rn2_3.c1.c.c.m[128 x 1], rn2_3.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c1.y = RectifiedLinear(rn2_3.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.c = Convolution(rn2_3.c2.W[128 x 1152], rn2_3.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization(rn2_3.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.c2.c.sc[128 x 1], rn2_3.c2.c.b[128 x 1], rn2_3.c2.c.m[128 x 1], rn2_3.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.p = Plus(rn2_3.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_2.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_3.y = RectifiedLinear(rn2_3.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.c = Convolution(rn2_4.c1.c.W[128 x 1152], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization(rn2_4.c1.c.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c1.c.c.sc[128 x 1], rn2_4.c1.c.c.b[128 x 1], rn2_4.c1.c.c.m[128 x 1], rn2_4.c1.c.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c1.y = RectifiedLinear(rn2_4.c1.c.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.c = Convolution(rn2_4.c2.W[128 x 1152], rn2_4.c1.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter -> [128 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization(rn2_4.c2.c.c[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_4.c2.c.sc[128 x 1], rn2_4.c2.c.b[128 x 1], rn2_4.c2.c.m[128 x 1], rn2_4.c2.c.isd[128 x 1]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.p = Plus(rn2_4.c2.c.y[28 x 28 x 128 x * {W=28, H=128, C=28}], rn2_3.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn2_4.y = RectifiedLinear(rn2_4.p[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [28 x 28 x 128 x *]
Validating --> rn3_1.c1.c.c.c = Convolution(rn3_1.c1.c.W[256 x 1152], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization(rn3_1.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c1.c.c.sc[256 x 1], rn3_1.c1.c.c.b[256 x 1], rn3_1.c1.c.c.m[256 x 1], rn3_1.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c1.y = RectifiedLinear(rn3_1.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.c = Convolution(rn3_1.c2.W[256 x 2304], rn3_1.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization(rn3_1.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c2.c.sc[256 x 1], rn3_1.c2.c.b[256 x 1], rn3_1.c2.c.m[256 x 1], rn3_1.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1_Wproj = LearnableParameter -> [256 x 128]
Validating --> rn3_1.c_proj.c = Convolution(rn3_1_Wproj[256 x 128], rn2_4.y[28 x 28 x 128 x * {W=28, H=128, C=28}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization(rn3_1.c_proj.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.sc[256 x 1], rn3_1.c_proj.b[256 x 1], rn3_1.c_proj.m[256 x 1], rn3_1.c_proj.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.p = Plus(rn3_1.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.c_proj.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_1.y2 = RectifiedLinear(rn3_1.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.c = Convolution(rn3_2.c1.c.W[256 x 2304], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization(rn3_2.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c1.c.c.sc[256 x 1], rn3_2.c1.c.c.b[256 x 1], rn3_2.c1.c.c.m[256 x 1], rn3_2.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c1.y = RectifiedLinear(rn3_2.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.c = Convolution(rn3_2.c2.W[256 x 2304], rn3_2.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization(rn3_2.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.c2.c.sc[256 x 1], rn3_2.c2.c.b[256 x 1], rn3_2.c2.c.m[256 x 1], rn3_2.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.p = Plus(rn3_2.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_1.y2[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_2.y = RectifiedLinear(rn3_2.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.c = Convolution(rn3_3.c1.c.W[256 x 2304], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization(rn3_3.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c1.c.c.sc[256 x 1], rn3_3.c1.c.c.b[256 x 1], rn3_3.c1.c.c.m[256 x 1], rn3_3.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c1.y = RectifiedLinear(rn3_3.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.c = Convolution(rn3_3.c2.W[256 x 2304], rn3_3.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization(rn3_3.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.c2.c.sc[256 x 1], rn3_3.c2.c.b[256 x 1], rn3_3.c2.c.m[256 x 1], rn3_3.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.p = Plus(rn3_3.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_2.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_3.y = RectifiedLinear(rn3_3.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.c = Convolution(rn3_4.c1.c.W[256 x 2304], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization(rn3_4.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c1.c.c.sc[256 x 1], rn3_4.c1.c.c.b[256 x 1], rn3_4.c1.c.c.m[256 x 1], rn3_4.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c1.y = RectifiedLinear(rn3_4.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.c = Convolution(rn3_4.c2.W[256 x 2304], rn3_4.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization(rn3_4.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.c2.c.sc[256 x 1], rn3_4.c2.c.b[256 x 1], rn3_4.c2.c.m[256 x 1], rn3_4.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.p = Plus(rn3_4.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_3.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_4.y = RectifiedLinear(rn3_4.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.c = Convolution(rn3_5.c1.c.W[256 x 2304], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization(rn3_5.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c1.c.c.sc[256 x 1], rn3_5.c1.c.c.b[256 x 1], rn3_5.c1.c.c.m[256 x 1], rn3_5.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c1.y = RectifiedLinear(rn3_5.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.c = Convolution(rn3_5.c2.W[256 x 2304], rn3_5.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization(rn3_5.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.c2.c.sc[256 x 1], rn3_5.c2.c.b[256 x 1], rn3_5.c2.c.m[256 x 1], rn3_5.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.p = Plus(rn3_5.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_4.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_5.y = RectifiedLinear(rn3_5.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.c = Convolution(rn3_6.c1.c.W[256 x 2304], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization(rn3_6.c1.c.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c1.c.c.sc[256 x 1], rn3_6.c1.c.c.b[256 x 1], rn3_6.c1.c.c.m[256 x 1], rn3_6.c1.c.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c1.y = RectifiedLinear(rn3_6.c1.c.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.c = Convolution(rn3_6.c2.W[256 x 2304], rn3_6.c1.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter -> [256 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization(rn3_6.c2.c.c[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_6.c2.c.sc[256 x 1], rn3_6.c2.c.b[256 x 1], rn3_6.c2.c.m[256 x 1], rn3_6.c2.c.isd[256 x 1]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.p = Plus(rn3_6.c2.c.y[14 x 14 x 256 x * {W=14, H=256, C=14}], rn3_5.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn3_6.y = RectifiedLinear(rn3_6.p[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [14 x 14 x 256 x *]
Validating --> rn4_1.c1.c.c.c = Convolution(rn4_1.c1.c.W[512 x 2304], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c1.c.c.y = BatchNormalization(rn4_1.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c1.c.c.sc[512 x 1], rn4_1.c1.c.c.b[512 x 1], rn4_1.c1.c.c.m[512 x 1], rn4_1.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c1.y = RectifiedLinear(rn4_1.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.c = Convolution(rn4_1.c2.W[512 x 4608], rn4_1.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c2.c.y = BatchNormalization(rn4_1.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c2.c.sc[512 x 1], rn4_1.c2.c.b[512 x 1], rn4_1.c2.c.m[512 x 1], rn4_1.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1_Wproj = LearnableParameter -> [512 x 256]
Validating --> rn4_1.c_proj.c = Convolution(rn4_1_Wproj[512 x 256], rn3_6.y[14 x 14 x 256 x * {W=14, H=256, C=14}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.c_proj.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.b = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.m = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_1.c_proj.y = BatchNormalization(rn4_1.c_proj.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.sc[512 x 1], rn4_1.c_proj.b[512 x 1], rn4_1.c_proj.m[512 x 1], rn4_1.c_proj.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.p = Plus(rn4_1.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.c_proj.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_1.y2 = RectifiedLinear(rn4_1.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.c = Convolution(rn4_2.c1.c.W[512 x 4608], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c1.c.c.y = BatchNormalization(rn4_2.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c1.c.c.sc[512 x 1], rn4_2.c1.c.c.b[512 x 1], rn4_2.c1.c.c.m[512 x 1], rn4_2.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c1.y = RectifiedLinear(rn4_2.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.c = Convolution(rn4_2.c2.W[512 x 4608], rn4_2.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_2.c2.c.y = BatchNormalization(rn4_2.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.c2.c.sc[512 x 1], rn4_2.c2.c.b[512 x 1], rn4_2.c2.c.m[512 x 1], rn4_2.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.p = Plus(rn4_2.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_1.y2[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_2.y = RectifiedLinear(rn4_2.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.c = Convolution(rn4_3.c1.c.W[512 x 4608], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.c.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c1.c.c.y = BatchNormalization(rn4_3.c1.c.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c1.c.c.sc[512 x 1], rn4_3.c1.c.c.b[512 x 1], rn4_3.c1.c.c.m[512 x 1], rn4_3.c1.c.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c1.y = RectifiedLinear(rn4_3.c1.c.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.c = Convolution(rn4_3.c2.W[512 x 4608], rn4_3.c1.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.c2.c.sc = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.b = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.m = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.isd = LearnableParameter -> [512 x 1]
Validating --> rn4_3.c2.c.y = BatchNormalization(rn4_3.c2.c.c[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_3.c2.c.sc[512 x 1], rn4_3.c2.c.b[512 x 1], rn4_3.c2.c.m[512 x 1], rn4_3.c2.c.isd[512 x 1]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.p = Plus(rn4_3.c2.c.y[7 x 7 x 512 x * {W=7, H=512, C=7}], rn4_2.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> rn4_3.y = RectifiedLinear(rn4_3.p[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [7 x 7 x 512 x *]
Validating --> pool5 = AveragePooling(rn4_3.y[7 x 7 x 512 x * {W=7, H=512, C=7}]) -> [1 x 1 x 512 x *]
Validating --> OutputNodes.t = Times(OutputNodes.W[1000 x 512], pool5[1 x 1 x 512 x *]) -> [1000 x *]
Validating --> OutputNodes.b = LearnableParameter -> [1000]
Validating --> OutputNodes.z = Plus(OutputNodes.t[1000 x *], OutputNodes.b[1000]) -> [1000 x *]
Validating --> CE = CrossEntropyWithSoftmax(labels[1000 x *], OutputNodes.z[1000 x *]) -> [1]

183 out of 310 nodes do not share the minibatch layout with the input data.

Post-processing network complete.
evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.
Minibatch[1-1]: Samples Seen = 8    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 10.177629    
Minibatch[2-2]: Samples Seen = 8    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 11.131725    
Minibatch[3-3]: Samples Seen = 8    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 44.671055    
Minibatch[4-4]: Samples Seen = 8    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 17.368256    
Minibatch[5-5]: Samples Seen = 8    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 14.508415    
Minibatch[6-6]: Samples Seen = 8    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 23.401848    
Minibatch[7-7]: Samples Seen = 8    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 21.360643    
Minibatch[8-8]: Samples Seen = 8    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 16.684155    
Minibatch[9-9]: Samples Seen = 8    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 11.859961    
Minibatch[10-10]: Samples Seen = 8    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 7.2630763    
Minibatch[11-11]: Samples Seen = 8    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 35.914932    
Minibatch[12-12]: Samples Seen = 8    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 15.637892    
Minibatch[13-13]: Samples Seen = 4    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 20.158958    
Final Results: Minibatch[1-13]: Samples Seen = 100    Err: ErrorPrediction/Sample = 1    ErrTop5: ErrorPrediction/Sample = 1    CE: CrossEntropyWithSoftmax/Sample = 19.204725    Perplexity = 2.1903132e+008    
COMPLETED